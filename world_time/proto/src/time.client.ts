// @generated by protobuf-ts 2.9.0 with parameter server_generic
// @generated from protobuf file "time.proto" (package "time", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TimeRoutes } from "./time";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TimeResponse } from "./time";
import type { TimeRequest } from "./time";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service time.TimeRoutes
 */
export interface ITimeRoutesClient {
    /**
     * @generated from protobuf rpc: request(time.TimeRequest) returns (time.TimeResponse);
     */
    request(input: TimeRequest, options?: RpcOptions): UnaryCall<TimeRequest, TimeResponse>;
}
/**
 * @generated from protobuf service time.TimeRoutes
 */
export class TimeRoutesClient implements ITimeRoutesClient, ServiceInfo {
    typeName = TimeRoutes.typeName;
    methods = TimeRoutes.methods;
    options = TimeRoutes.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: request(time.TimeRequest) returns (time.TimeResponse);
     */
    request(input: TimeRequest, options?: RpcOptions): UnaryCall<TimeRequest, TimeResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TimeRequest, TimeResponse>("unary", this._transport, method, opt, input);
    }
}
