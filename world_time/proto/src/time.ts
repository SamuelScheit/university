// @generated by protobuf-ts 2.9.0 with parameter server_generic
// @generated from protobuf file "time.proto" (package "time", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message time.TimeRequest
 */
export interface TimeRequest {
    /**
     * @generated from protobuf field: string timezone = 1;
     */
    timezone: string;
    /**
     * @generated from protobuf field: string local_timezone = 2;
     */
    localTimezone: string;
    /**
     * @generated from protobuf field: int64 unix = 3;
     */
    unix: bigint;
}
/**
 * @generated from protobuf message time.TimeResponse
 */
export interface TimeResponse {
    /**
     * @generated from protobuf field: int64 unix_offset = 1;
     */
    unixOffset: bigint;
    /**
     * @generated from protobuf field: int64 offset = 2;
     */
    offset: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class TimeRequest$Type extends MessageType<TimeRequest> {
    constructor() {
        super("time.TimeRequest", [
            { no: 1, name: "timezone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "local_timezone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "unix", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TimeRequest>): TimeRequest {
        const message = { timezone: "", localTimezone: "", unix: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TimeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TimeRequest): TimeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string timezone */ 1:
                    message.timezone = reader.string();
                    break;
                case /* string local_timezone */ 2:
                    message.localTimezone = reader.string();
                    break;
                case /* int64 unix */ 3:
                    message.unix = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TimeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string timezone = 1; */
        if (message.timezone !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.timezone);
        /* string local_timezone = 2; */
        if (message.localTimezone !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.localTimezone);
        /* int64 unix = 3; */
        if (message.unix !== 0n)
            writer.tag(3, WireType.Varint).int64(message.unix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message time.TimeRequest
 */
export const TimeRequest = new TimeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TimeResponse$Type extends MessageType<TimeResponse> {
    constructor() {
        super("time.TimeResponse", [
            { no: 1, name: "unix_offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TimeResponse>): TimeResponse {
        const message = { unixOffset: 0n, offset: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TimeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TimeResponse): TimeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 unix_offset */ 1:
                    message.unixOffset = reader.int64().toBigInt();
                    break;
                case /* int64 offset */ 2:
                    message.offset = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TimeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 unix_offset = 1; */
        if (message.unixOffset !== 0n)
            writer.tag(1, WireType.Varint).int64(message.unixOffset);
        /* int64 offset = 2; */
        if (message.offset !== 0n)
            writer.tag(2, WireType.Varint).int64(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message time.TimeResponse
 */
export const TimeResponse = new TimeResponse$Type();
/**
 * @generated ServiceType for protobuf service time.TimeRoutes
 */
export const TimeRoutes = new ServiceType("time.TimeRoutes", [
    { name: "request", options: {}, I: TimeRequest, O: TimeResponse }
]);
